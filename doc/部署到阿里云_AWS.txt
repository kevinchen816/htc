<?php

阿里云
47.106.33.133

user: root
password: Kevin816

user: kevin
password: kevin816

/dev/root        39G  1.6G   38G   5% /
$ sudo apt-get update
/dev/root        39G  1.8G   37G   5% /
php
/dev/root        39G  1.9G   37G   5% /
nginx
/dev/root        39G  1.9G   37G   5% /

//---------------------------------------------------------------------------------
[ 参考 ]
Laravel 部署到阿里云 / 腾讯云
https://laravel-china.org/articles/8983/laravel-deploys-to-the-ali-cloud-tencent-cloud

Ubuntu 使用 lnmp 部署 laravel
https://www.jianshu.com/p/fb037caf4fff

    ** 网页目录 /var/www

    $ adduser kevin
    $ sudo vim /etc/sudoers
        # User privilege specification
        root ALL=(ALL:ALL) ALL
        kevin ALL=(ALL:ALL) ALL

// 以下开始建立 AWS 服务器及部署 -------------------------------------------------------

[ AWS 建立 EC2 ]

    补充：云服务器需要增加适当的安全组
    HTTP 80

    1. 选择 Ubuntu Server 18.04 LTS
        - Ubuntu Server 18.04 LTS (HVM), SSD Volume Type - ami-07ad4b1c3af1ea214  64 位 (x86)
            Ubuntu Server 18.04 LTS (HVM),EBS General Purpose (SSD) Volume Type.
            Support available from Canonical (http://www.ubuntu.com/cloud/services).

        - Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-06c43a7df16e8213c
        - Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-0d7ed3ddb85b521a6   64 位 (x86)
        - Amazon Linux AMI 2018.03.0 (HVM), SSD Volume Type - ami-00a5245b4816c38e6   64 位 (x86)

        // Google
        ** Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-1029-gcp x86_64)

    澳大利亚使用:
        Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-1031-aws x86_64)
    日本使用:
        Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-1021-aws x86_64)

[ 要访问您的实例 ]
    1. 打开 SSH 客户端。(了解如何使用 PuTTY 连接)
    2. 查找您的私有密钥文件(mykey.pem)。向导会自动检测您用于启动实例的密钥。
    3. 您的密钥必须不公开可见，SSH 才能工作。如果需要，请使用此命令：

重要--》  chmod 400 mykey.pem

    4. 通过其 公有 DNS 连接到您的实例:
        ec2-13-237-165-208.ap-southeast-2.compute.amazonaws.com
示例：
    ssh -i "mykey.pem" ubuntu@ec2-13-237-165-208.ap-southeast-2.compute.amazonaws.com

//---------------------------------------------------------------------------------
[ 更新列表 ]
	$ sudo apt-get update  // 访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。

[ 安装语言包]
    # 为了解决系统不同语言之间可能发生的冲突，安装之后可以减少许多因语言编码带来的问题。
	$ sudo apt-get install -y language-pack-en-base    // -y 参数的意思是直接安装无需确认

    # 生成需要的 locale 文件,
    # 设定语言编码为 UTF-8 (/etc/default/locale)，内容为 LANG=C.UTF-8
    $ sudo locale-gen en_US.UTF-8
    Generating locales (this might take a while)...
    en_US.UTF-8... done
    Generation complete.

[ 安装常用软件 ]
	$ sudo apt-get install -y vim git zip unzip

    # 补充：使用 composer 可能有坑，比如缺少应用造成错误，如缺少 zip unzip 包

/*----------------------------------------------------------------------------------*/
/*                                                                                  */
/*----------------------------------------------------------------------------------*/
[ 安装 PHP7 ]
	请确保每一步没有出错，如果有报错，可尝试多安装几次

    参考下面的【 在 Ubuntu 18.04 上安装 PHP 7.2 】

    # 参考：Ubuntu如何安装php7.2、php7.3、php7.4？（方法详解）
    # https://m.php.cn/article/455811.html

    # 参考：如何在 Ubuntu上 新增與刪除 PPA 儲存庫
    # https://peterli.website/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E6%96%B0%E5%A2%9E%E8%88%87%E5%88%AA%E9%99%A4ppa%E5%84%B2%E5%AD%98%E5%BA%AB/

    # 更新软件列表
    # 这个命令，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑。
    # 软件包管理器里看到的软件列表，都是通过 update 命令更新的。
    $ sudo apt-get update
    # update后，可能需要upgrade一下。

    # 更新软件
    # 这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，
    # 如果发现已安装的软件版本太低，就会提示你更新。
    # 如果你的软件都是最新版本，会提示：
    $ sudo apt-get upgrade

    # 添加 PHP 存储库 （采用 ppa 方式安装 php）
    # 要安装PHP 7.4，需要使用第三方存储库。我们将使用以前再次使用的 ondrej/php 的存储库。
    #
    # PPA 是 personal package archive 的缩写，即个人包档案。
    # 使用 PPA，软件制作者可以轻松地发布软件，并且能够准确地对用户进行升级。
    # Ubuntu 用户使用 PPA 源将更加方便的获得软件的最新版本。
	$ sudo apt-get install -y software-properties-common
    # 说明：software-properties-common 是 add-apt-repository 所依赖的包

    # 使用下列的指令來匯入一個指定的私人 APT 儲存庫，下面以 ondrej/php 為例：
    $ sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php
    # 说明：添加 php7 的 ppa，注意 LC_ALL=en_US.UTF-8 参数告诉我们系统语言为 UTF-8，
    # 如果没有，可能会出现错误，如阿里云的服务器。

	$ sudo apt-get update                   // 更新安装包，把刚才添加的包拉取下来

【 安装 php7.4 】
    $ sudo apt-get install -y php7.4
    $ php -v                                // 确认是否安装成功 (或 --version)
    PHP 7.4.15 (cli) (built: Feb 23 2021 15:12:26) ( NTS )
    Copyright (c) The PHP Group
    Zend Engine v3.4.0, Copyright (c) Zend Technologies
        with Zend OPcache v7.4.15, Copyright (c), by Zend Technologies

    # 安装PHP 7.4模块
    # 根据你的应用程序，你可能需要其他软件包和模块。可以使用以下命令安装最常用的模块：
    $ sudo apt-get install -y php7.4-mysql  // 这是 php 与 mysql 的通信模块
    $ sudo apt-get install -y php7.4-fpm    // 这是 Nginx 用来解析 php 文件的
    $ sudo apt-get install -y php7.4-json php7.4-xml
    $ sudo apt-get install -y php7.4-curl php7.4-dev php7.4-gd php7.4-mbstring php7.4-zip
    $ sudo apt-get install -y php-pear php-mcrypt php-bcmath
    # php-pdo

    **【更新补充 php7.4 】
        # PHP 目前最新版本是 7.4，這個月 Laravel 也將版本更新到了 8，
        # 建議要用 Laravel 8 開發的人，請一併將 PHP 版本升級到 7.3 以上喔！

        # 安裝 PHP 需要的套件以及套件管理工具 composer。
        $ sudo apt install php-bcmath php-pdo

            php-mcrypt 《-- 不确定是否一定需要安装

        # 啟用 PHP-fpm
        $ sudo service php7.4-fpm start

【 在 Ubuntu 18.04 上安装 PHP 7.2 】
    $ apt-get update && apt-get upgrade
    #安装 PHP 7.2
    $ apt-get install php
    $ php -v
    #安装 PHP 7.2 模块
    $ apt-get install php-pear php-fpm php-dev php-zip php-curl php-xmlrpc php-gd php-mysql php-mbstring php-xml libapache2-mod-php
    # 检查 Ubuntu 中所有可用的PHP模块
    $ apt-cache search --names-only ^php

【 安装 php7.1 】
	$ apt-cache search php7.1               // 搜索php7.1开头的包检验是否安装成功
    $ sudo apt-get install -y php7.1        // 安装 php7.1，安装成功后运行 php -v 查看是否安装成功
	$ sudo apt-get install -y php7.1-mysql  // 这是 php7.1 与 mysql 的通信模块
	$ sudo apt-get install -y php7.1-fpm    // 这是 Nginx 用来解析 php 文件的
	$ sudo apt-get install -y php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring
    # 上面为安装其他必备模块

    $ php -v                                // 确认是否安装成功 (或 --version)
    PHP 7.1.26-1+ubuntu18.04.1+deb.sury.org+1 (cli) (built: Jan 11 2019 14:13:49) ( NTS )
 or PHP 7.1.27-1+ubuntu18.04.1+deb.sury.org+1 (cli) (built: Mar  7 2019 20:02:25) ( NTS )

/*----------------------------------------------------------------------------------*/
[ 安装 Mysql ]

	$ sudo apt-get install -y mysql-server
    $ mysql --version
        mysql  Ver 8.0.22-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))
        mysql  Ver 8.0.23-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))

    # ** 创建新用户 **
    $ sudo mysql
    mysql> CREATE USER 'kevin'@'%' IDENTIFIED BY 'your_password';
    mysql> CREATE USER 'kevin'@'%' IDENTIFIED BY 'Tenware@2008';
    // 参考 https://www.cnblogs.com/xujishou/p/6306765.html

    # ** 创建数据库 **
    $ sudo mysql
    mysql> CREATE DATABASE sample;  // 数据库名称=sample
    mysql> GRANT all privileges ON sample.* TO 'kevin'@'%';
    # 或
    mysql> CREATE DATABASE htc;  // 数据库名称=htc
    mysql> GRANT all privileges ON htc.* TO 'kevin'@'%';
    # 或
    mysql> CREATE DATABASE xble;    // 数据库名称=xble
    mysql> GRANT all privileges ON xble.* TO 'kevin'@'%';

    mysql> FLUSH PRIVILEGES;
    mysql> exit
    // 名字应该和 .env 文件中对应的数据库一致，如 DB_DATABASE=sample
    // Laravel 5.4 默认使用 utf8mb4 字符编码，而不是之前的 utf8 编码。


    # ** 重要：需要修改 mysqld.cnf，否则无法使用 Sequel Pro 连接 MySQL **
    # 测试：使用 mysql -h 52.192.xxx.xxx -P 3306 -uUSERNAME -pPASSWORD
    $ mysql -h 39.108.97.249 -P 3306
    # ERROR 2003 (HY000): Can't connect to MySQL server on '39.108.97.249' (111)

    # 修改 /etc/mysql/mysql.conf.d/mysqld.cnf
    $ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf
        bind-address = 127.0.0.1   <-- 把这行注释掉

    # 重启 MySQL
    # $ sudo /etc/init.d/mysql start
    # $ sudo /etc/init.d/mysql stop
    $ sudo /etc/init.d/mysql restart

    # 测试：
    $ mysql -h 39.108.97.249 -P 3306 -ukevin -pkevin816
    $ mysql -h 8.134.118.47 -P 3306 -ukevin -pTenware@2008

    # 参考：
    https://www.cnblogs.com/wangdaijun/p/6024972.html


        **** 补充：可选 ****
        因为上线的应用为 laravel 5.5 版本开发的，为了之后的兼容性问题，
        ubuntu14.04 直接安装的 mysql 不是较新版本，因此要升级一下mysql
        $ cd ~
        $ wget https://dev.mysql.com/get/mysql-apt-config_0.8.1-1_all.deb
        $ sudo dpkg -i mysql-apt-config_0.8.1-1_all.deb
         (注意在添加源的时候，会叫你选择安装 MySQL 哪个应用，这里选择 Server 即可，
          再选择 MySQL 5.7 后又会回到选择应用的那个界面，此时选择 Apply 即可。)

        解压安装包后会弹出框，选择好 mysql 5.7 版本后选择ok 然后继续
        $ sudo apt-get update                   // 然后,更新包索引
        $ sudo apt-get install mysql-server     // 然后,安装 MySQL-server
        $ sudo mysql_upgrade -u root -p         // 然后,升级全部的 MySQL 数据库
        $ sudo service mysql restart            // 最后,重启mysql server

        登陆一下mysql看看是否已经升级完毕，成功了进入下一步


/*----------------------------------------------------------------------------------*/
[ 安装 Nginx ]

	// 重要：安装之前需确认是否安装了apache2，如果已经安装了apache2，需要先停止/卸载 apache2
	// 停止
	$ sudo service apache2 stop
	//卸载
	$ sudo apt-get --purge remove apache2
	$ sudo apt-get --purge remove apache2.2-common
	$ sudo apt-get autoremove

	// 安装 nginx
	$ sudo apt-get install -y nginx

    # 补充：安装后可在浏览器测试是否没问题（注意：需在 EC2 的安全组入站，加上 HTTP 80）

/*----------------------------------------------------------------------------------*/
/*                                                                                  */
/*----------------------------------------------------------------------------------*/
[ 配置 PHP7 ]
    #$ sudo vim /etc/php/7.1/fpm/php.ini
    #$ sudo vim /etc/php/7.2/fpm/php.ini
	$ sudo vim /etc/php/7.4/fpm/php.ini
		# 修改
        cgi.fix_pathinfo=0

        # 解决 413-Payload Too Large
        post_max_size = 101M    // 8M    《-- 注意：post_max_size 需要大于 upload_max_filesize
        upload_max_filesize = 100M // 2M

    #$ sudo vim /etc/php/7.1/fpm/pool.d/www.conf
    #$ sudo vim /etc/php/7.2/fpm/pool.d/www.conf
	$ sudo vim /etc/php/7.4/fpm/pool.d/www.conf
		# 修改
        #listen = /var/run/php/php7.1-fpm.sock   <-- 前面加上 /var
        listen = /var/run/php/php7.4-fpm.sock   <-- 前面加上 /var
        #（文章错误： listen = /var/run/php7.1-fpm.sock）

[ 配置 Nginx ]
    $ sudo vim /etc/nginx/nginx.conf

        # 解决 413-Request Entity Too Large
        http {
            # server_tokens off;

            client_max_body_size 100m;    #100M 为允许的文件大小
        }

	$ sudo vim /etc/nginx/sites-available/default

    	# 修改如下，根据自己的项目情况修改对应信息：
        server {
            listen 80 default_server;
            listen [::]:80 default_server;

            # root /var/www/html;
            # root /var/www/sample/public;            <-- sample 为 Laravel 项目名称
            root /var/www/xble/public;            <-- sample 为 Laravel 项目名称

            # index index.html index.htm index.nginx-debian.html;
            index index.php;                        <-- 要修改 (注意：第一个一定是要 index)

            ** 重要：要增加 index.php，否则浏览器访问时会出现 403 Forbidden

            # server_name _;
            server_name 47.106.33.133;              <-- 替换为你的网站域名或IP地址

            location / {
                #try_files $uri $uri/ =404;
                try_files $uri $uri/ /index.php?$query_string;  <-- 修改
            }

            ** 重要：需加上以下内容，否则浏览器访问时会出现 403 Forbidden
            location ~ \.php$ {
                try_files $uri /index.php =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                #fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;
                fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
            }
        }

        补充说明：
        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;
            - 没有此设定，在浏览器访问会变成下载文件
            - 路径要正确, 否则会出项 502 Bad Gateway

        include fastcgi_params;
            - 没有此设定，在浏览器访问会是空白页面

//---------------------------------------------------------------------------------
[ 安装 Composer 并使用 Composer 安装代码依赖 ]

    // 访问 composer 官网 https://getcomposer.org/download/
    // 获取下面四行代码最新版，直接粘贴执行安装 Composer

    重要：不要使用 $ sudo apt install composer 的方式安裝
    补充：使用 composer 可能有坑，比如缺少应用造成错误，如缺少 zip unzip 包

    # old
    $ php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    $ php -r "if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    $ php composer-setup.php
    $ php -r "unlink('composer-setup.php');"

    # new (2021/03/05)
    $ sudo php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    $ sudo php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    $ sudo php composer-setup.php
    $ sudo php -r "unlink('composer-setup.php');"

    // 重要：然后移动 composer.phar
    $ sudo mv composer.phar /usr/local/bin/composer

/*----------------------------------------------------------------------------------*/
/*                                                                                  */
/*----------------------------------------------------------------------------------*/
[ 创建新站点 - 拉取代码 ]
	** 建议先将代码上传到云端代码仓库（github, coding）然后再在服务端上拉取
	$ cd /var/www

    # 方法 1: 需要正确设定 ssh key
    # 在实际的 AWS 主机，需要正确设定 ssh key
    # Homestead 虚拟机会使用电脑里 ~/.ssh 里的设定
    $ sudo git clone git@github.com:kevinchen816/sample.git

    # 方法 2: 比较简单，不用设定 ssh key，但要输入密码
    #$ sudo git clone https://github.com/kevinchen816/sample.git
    #$ sudo git clone https://github.com/kevinchen816/htc.git
    #
    # 使用 http 代替 https:
    #
    $ sudo git clone http://github.com/kevinchen816/htc.git
    Cloning into 'sample'...
    Username for 'https://github.com': kevin@10ware.com
    Password for 'https://kevin@10ware.com@github.com': Tenware@2008
    remote: Enumerating objects: 236, done.
    remote: Total 236 (delta 0), reused 0 (delta 0), pack-reused 236
    Receiving objects: 100% (236/236), 668.88 KiB | 942.00 KiB/s, done.
    Resolving deltas: 100% (64/64), done.

	** 进入项目目录
	$ cd /var/www/sample

    $ sudo cp .env.example .env
    $ sudo vim .env
        // 根据项目实际情况修改 .env 文件
        // DB_DATABASE=homestead
        // DB_USERNAME=homestead
        // DB_PASSWORD=secret

        DB_DATABASE=sample
        DB_USERNAME=kevin         // 在安装 MySQL 后，创建用户 kevin
        DB_PASSWORD=kevin816

    [ 创建数据库 ]
    参考前面说明 (使用 AWS RDS 需要修改 config/database.php，参考后面说明)

	$ sudo composer install


        Your lock file does not contain a compatible set of packages. Please run composer update.
        改为使用 $ composer update


            Package caouecs/laravel-lang is abandoned, you should avoid using it. Use https://github.com/Laravel-Lang/lang instead.
            Package jakub-onderka/php-console-color is abandoned, you should avoid using it. Use php-parallel-lint/php-console-color instead.
            Package jakub-onderka/php-console-highlighter is abandoned, you should avoid using it. Use php-parallel-lint/php-console-highlighter instead.
            Package mtdowling/cron-expression is abandoned, you should avoid using it. Use dragonmantank/cron-expression instead.
            Package fzaninotto/faker is abandoned, you should avoid using it. No replacement was suggested.
            Package phpunit/php-token-stream is abandoned, you should avoid using it. No replacement was suggested.
            Package phpunit/phpunit-mock-objects is abandoned, you should avoid using it. No replacement was suggested.

            Carbon 1 is deprecated, see how to migrate to Carbon 2.
            https://carbon.nesbot.com/docs/#api-carbon-2
                You can run './vendor/bin/upgrade-carbon' to get help in updating carbon and other frameworks and libraries that depend on it.


	$ sudo php artisan key:generate   // 生成密钥，产生的 key 自动加到 .env 的 APP_KEY
    $ sudo php artisan migrate

    $ sudo php artisan up  <-- 不需要  // 将站点设回可访问状态 (down：将站点设为维护状态)

    [ 修改权限 ]
    $ sudo chown -R www-data:www-data /var/www/sample
    $ sudo chmod -R 777 /var/www/sample/storage
或
    $ sudo chown -R www-data:www-data /var/www/htc
    $ sudo chmod -R 777 /var/www/htc/storage
或
    $ sudo chown -R www-data:www-data /var/www/caperplus
    $ sudo chmod -R 777 /var/www/caperplus/storage
或
    $ sudo chown -R www-data:www-data /var/www/xble
    $ sudo chmod -R 777 /var/www/xble/storage

    [ 重启 Nginx 和 PHP7 fpm ]
    $ sudo service nginx restart
    // $ sudo service php7.1-fpm restart
    // $ sudo service php7.2-fpm restart
    $ sudo service php7.4-fpm restart

搞定！

/*----------------------------------------------------------------------------------*/
/*                                                                                  */
/*----------------------------------------------------------------------------------*/
[ 下载配置 htc ]

    $ cd /var/www
    //$ sudo git clone https://github.com/kevinchen816/htc.git
    $ sudo git clone http://github.com/kevinchen816/htc.git
    $ cd /var/www/htc
    $ sudo cp .env.example .env
    $ sudo vim .env
        APP_DEBUG=false

        DB_DATABASE=htc
        DB_USERNAME=kevin         // 在安装 MySQL 后，创建用户 kevin
        DB_PASSWORD=kevin816

        MAIL_DRIVER=smtp
        MAIL_HOST=smtp.exmail.qq.com
        MAIL_PORT=465
        MAIL_USERNAME=no-reply@10ware.com
        MAIL_PASSWORD=Caperplus7002
        MAIL_ENCRYPTION=ssl
        MAIL_FROM_ADDRESS=no-reply@10ware.com
        MAIL_FROM_NAME=no-reply

    $ sudo mysql
    mysql> CREATE DATABASE htc;  // 数据库名称=htc
    mysql> GRANT all privileges ON htc.* TO 'kevin'@'%';
    mysql> FLUSH PRIVILEGES;
    mysql> exit

    $ cd /var/www/htc
    $ sudo composer install
    $ sudo php artisan key:generate   // 生成密钥，产生的 key 自动加到 .env 的 APP_KEY
    $ sudo php artisan migrate
    $ sudo php artisan up  <-- 不需要  // 将站点设回可访问状态 (down：将站点设为维护状态)

    $ sudo chown -R www-data:www-data /var/www/htc
    $ sudo chmod -R 777 /var/www/htc/storage

    $ sudo chown -R www-data:www-data /var/www/caperplus
    $ sudo chmod -R 777 /var/www/caperplus/storage

    $ sudo vim /etc/nginx/sites-available/default
        server {
            root /var/www/htc/public;   <-- 修改为 htc
        }

    $ sudo service nginx restart
    // $ sudo service php7.1-fpm restart
    $ sudo service php7.4-fpm restart

[ 配置 laravel-admin ]
    //$ sudo composer require encore/laravel-admin  // 不需要
    $ sudo php artisan vendor:publish --provider="Encore\Admin\AdminServiceProvider"
    Copied Directory [/vendor/encore/laravel-admin/config] To [/config]
    Copied Directory [/vendor/encore/laravel-admin/resources/lang] To [/resources/lang]
    Copied Directory [/vendor/encore/laravel-admin/database/migrations] To [/database/migrations]
    Copied Directory [/vendor/encore/laravel-admin/resources/assets] To [/public/vendor/laravel-admin]
    Publishing complete.

    $ php artisan admin:install
    Nothing to migrate.
    /var/www/htc/app/Admin directory already exists !

[ 创建 plan product ]
    ** 先登录
    http://xxx.xxx.xxx.xxx/adminxx
    Username: admin
    Password: admin

    ** 创建
    http://xxx.xxx.xxx.xxx/adminxx/plan/products/build/1   <-- 创建 plan product
    //http://xxx.xxx.xxx.xxx/adminxx/plan/products/build/2   <-- 创建 plan product for Stripe

//---------------------------------------------------------------------------------
[ 修改 config/database.php ]
    'mysql' => [
        'driver' => 'mysql',
        'host' => env('DB_HOST', '127.0.0.1'),
        'port' => env('DB_PORT', '3306'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'unix_socket' => env('DB_SOCKET', ''),
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'strict' => false,  <-- 重要：在使用 AWS RDS 需要修改为 false, 否则会出现 SQLSTATE[42000]: Syntax error...
        'engine' => null,
    ],

    ** 补充: 详细错误讯息如下：
    $ sudo php artisan migrate

    In Connection.php line 664:
      SQLSTATE[42000]: Syntax error or access violation: 1231 Variable 'sql_mode' can't be set to the value
      of 'NO_AUTO_CREATE_USER' (SQL: select * from information_schema.tables where table_schema = sample and
       table_name = migrations)

    In MySqlConnector.php line 150:
      SQLSTATE[42000]: Syntax error or access violation: 1231 Variable 'sql_mode' can't be set to the value
      of 'NO_AUTO_CREATE_USER'

    ** 补充: 远端数据库测试
    $ sudo mysql -h htc-db-instance.caieb0likkhe.ap-southeast-2.rds.amazonaws.com -ukevin -pkevin816

//---------------------------------------------------------------------------------
Ubuntu 14/16 下的 Laravel LNMP 线上环境自动部署脚本
https://laravel-china.org/topics/2814/ubuntu-1416-under-the-laravel-lnmp-online-environment-automatically-deploy-scripts

阿里云 ECS 部署：nginx+MySQL+Laravel+PHP7+Redis+Node.js
https://laravel-china.org/articles/4715/ali-cloud-ecs-deployment-nginxmysqllaravelphp7redisnodejs


使用 Homestead 能解决掉上面讲的开发环境不一致的问题，并且你也可以选择使用 laravel-ubuntu-init 布置服务器，来达到开发环境和线上环境的统一。

	https://github.com/summerblue/laravel-ubuntu-init


我在阿里上用centos7部署的小水管，用宝塔面板管理（安装了php7，mysql5.6，nginx1.12），自己安装和git，composer，如果你想还可以安装npm，yarn，注意将库连接改成国内的，然后pull自己代码，也运行成功了，其实那个环境是一个合集，我们能用到的基本就是我说的这些，主要是国内是centos流行啊。。。。

//---------------------------------------------------------------------------------
在AWS上安装laravel框架
https://www.cnblogs.com/ImYZF/p/3566295.html

如何在 Amazon Cloud 上安装 Laravel（AWS EC2）
https://laravel-china.org/articles/5486/how-do-i-install-laravel-aws-ec2-on-amazon-cloud