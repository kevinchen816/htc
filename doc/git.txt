<?php

Username for 'https://github.com': kevin@10ware.com
Password for 'https://kevin@10ware.com@github.com': Tenware@2008


/*------------------------------------------------------------------------------*/
【 解决拉取 github 仓库报错 “gnutls_handshake () failed” 问题 】
 https://blog.frytea.com/archives/421/

#问题
$ git pull
fatal: unable to access 'https://github.com/kevinchen816/htc.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated.

# 解决: 使用 http 代替 https:
$ sudo git clone https://github.com/kevinchen816/htc.git
$ sudo git clone http://github.com/kevinchen816/htc.git

/*------------------------------------------------------------------------------*/
/*                                                                              */
/*------------------------------------------------------------------------------*/
为 GitHub 账号设置 SSH Key    # 每台电脑一开始做一次即可

# 到 主机中 复制公钥 id_rsa.pub 的内容，将公钥添加到 GitHub 账号
# 打开 Github SSH 令牌管理页面，然后把你刚刚复制的令牌按照上图示例添加
    > cat ~/.ssh/id_rsa.pub

出于安全考虑，Github 服务器和我们本地的通讯要求使用 SSH Key 来验证
# 在前面『环境部署』的章节中，我们已经在主机中生成过 SSH Key，并且 Homestead 在初始化时，
# 通过 Homestaed.yaml 文件中的 keys 选项已经把主机中的 SSH Key 私钥复制到虚拟机中，
# 所以这里我们无需再次生成 SSH Key。

接下来将 SSH Key 添加到 ssh-agent 中：
# 查看ssh-agent是否在后台运行，如果能查看到pid信息，那么就表示正常运行
# 如果没有，那么就表示前面安装git的时候，不是正确的版本，重新安装即可
    $ eval "$(ssh-agent -s)"
    Agent pid 37833

# 然后将秘钥添加到ssh-agent中
    $ ssh-add ~/.ssh/id_rsa
    Identity added: /home/vagrant/.ssh/id_rsa (/home/vagrant/.ssh/id_rsa)

# 補充
    ssh-agent 是用于管理SSH private keys的, 长时间持续运行的守护进程（daemon）.
    唯一目的就是对解密的私钥进行高速缓存

    ssh-add 提示并将用户的使用的私钥添加到由ssh-agent 维护的列表中.
    此后, 当使用公钥连接到远程 SSH 或 SCP 主机时,不再提示相关信息.

/*------------------------------------------------------------------------------*/
/*                                                                              */
/*------------------------------------------------------------------------------*/
# Git 的基本设置
    $ git config --list
    $ git config --global user.name "Kevin Chen"
    $ git config --global user.email "kevin@10ware.com"

# 此设置是 Git 命令 push 的默认模式为 simple，
# 当我们执行 git push 没有指定分支时，自动使用当前分支，而不是报错。
    $ git config --global push.default simple

/*-------------------------------------------------------------------------------*/
# 第一次提交代码到 Github    # 每个 project 做一次即可
1. 首先在 github.com 新建一个 GitHub 仓库
   # Initialize this repository with a README 这一项无需勾选
   # 因为 Laravel 已默认帮我们创建好了 readme.md 文件。

2. 在 Homestead 虚拟机，对 Git 进行初始化
    $ cd ~/Code/my_sample
    $ git init                  # 对 Git 进行初始化
    $ git add -A                # 将项目所有文件纳入到 Git 中
    $ git status                # 检查 Git 状态，显示存放在 Git 暂存区的文件
    $ git commit -m "Initial"   # 将暂存区的文件都提交到 Git
    $ git log

    $ git remote add origin git@github.com:your_username/my_sample.git
 #or  git remote add origin https://github.com/kevinchen816/my_sample.git

    $ git push -u origin master  # 加了参数 -u 后，以后即可直接用 git push
                                 # 代替 git push origin master

    // 注意：$ git remote add 使用 SSH 的方式，kevinchen816 前面是冒号 :

# 代码改动，更新到 GitHub
    $ git add -A
    $ git commit -m "xxxx"
    $ git push

#
    $ sudo git pull
    Username for 'https://github.com': kevin@10ware.com
    Password for 'https://kevin@10ware.com@github.com': Tenware@2008

/*-------------------------------------------------------------------------------*/
# 放弃本地修改
$ git fetch --all
$ git reset --hard origin/master
$ git pull

# 回退到某个历史版本
https://www.jianshu.com/p/1814668a61e1
https://blog.csdn.net/weixin_36833780/article/details/84142504?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control

$ git log                           # 查找历史版本 （或 git log --oneline）
$ git reset --hard idxxxx           # 恢复到历史版本
$ git push -f -u origin master      # 把修改推到远程服务器

    # 注意：使用 git push -f 要非常小心
    # git push -f 远程仓库别名 分支名称
    # 加了参数 -u 后，以后即可直接用 git push 代替 git push origin master

/*-------------------------------------------------------------------------------*/
** 比较文件差异
1. git diff [文件名]

    将工作区中的文件和暂存区对应文件进行比较
    例：git diff test.txt

2. git diff [本地库中文件历史记录(指针)] [文件名]

    将工作区中的文件和本地库历史记录比较
    例：
    git diff HEAD test.txt      比较最新一次修改
    git diff HEAD^ text.txt     比较上一次修改
    git diff 46e8eaa test.txt   比较历史记录号为 46e8eaa的修改

3. git diff
    不带文件名，比较所有文件的修改

/*-------------------------------------------------------------------------------*/
$ git checkout -f

** 新建分支
$ git checkout master
$ git checkout -b login-logout